/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StylesRouteImport } from './routes/styles'
import { Route as PosturesRouteImport } from './routes/postures'
import { Route as HelpRouteImport } from './routes/help'
import { Route as GesturesRouteImport } from './routes/gestures'
import { Route as CompositionRouteImport } from './routes/composition'
import { Route as ArtistsRouteImport } from './routes/artists'
import { Route as IndexRouteImport } from './routes/index'

const StylesRoute = StylesRouteImport.update({
  id: '/styles',
  path: '/styles',
  getParentRoute: () => rootRouteImport,
} as any)
const PosturesRoute = PosturesRouteImport.update({
  id: '/postures',
  path: '/postures',
  getParentRoute: () => rootRouteImport,
} as any)
const HelpRoute = HelpRouteImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => rootRouteImport,
} as any)
const GesturesRoute = GesturesRouteImport.update({
  id: '/gestures',
  path: '/gestures',
  getParentRoute: () => rootRouteImport,
} as any)
const CompositionRoute = CompositionRouteImport.update({
  id: '/composition',
  path: '/composition',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtistsRoute = ArtistsRouteImport.update({
  id: '/artists',
  path: '/artists',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/artists': typeof ArtistsRoute
  '/composition': typeof CompositionRoute
  '/gestures': typeof GesturesRoute
  '/help': typeof HelpRoute
  '/postures': typeof PosturesRoute
  '/styles': typeof StylesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/artists': typeof ArtistsRoute
  '/composition': typeof CompositionRoute
  '/gestures': typeof GesturesRoute
  '/help': typeof HelpRoute
  '/postures': typeof PosturesRoute
  '/styles': typeof StylesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/artists': typeof ArtistsRoute
  '/composition': typeof CompositionRoute
  '/gestures': typeof GesturesRoute
  '/help': typeof HelpRoute
  '/postures': typeof PosturesRoute
  '/styles': typeof StylesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/artists'
    | '/composition'
    | '/gestures'
    | '/help'
    | '/postures'
    | '/styles'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/artists'
    | '/composition'
    | '/gestures'
    | '/help'
    | '/postures'
    | '/styles'
  id:
    | '__root__'
    | '/'
    | '/artists'
    | '/composition'
    | '/gestures'
    | '/help'
    | '/postures'
    | '/styles'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ArtistsRoute: typeof ArtistsRoute
  CompositionRoute: typeof CompositionRoute
  GesturesRoute: typeof GesturesRoute
  HelpRoute: typeof HelpRoute
  PosturesRoute: typeof PosturesRoute
  StylesRoute: typeof StylesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/styles': {
      id: '/styles'
      path: '/styles'
      fullPath: '/styles'
      preLoaderRoute: typeof StylesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/postures': {
      id: '/postures'
      path: '/postures'
      fullPath: '/postures'
      preLoaderRoute: typeof PosturesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/help': {
      id: '/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gestures': {
      id: '/gestures'
      path: '/gestures'
      fullPath: '/gestures'
      preLoaderRoute: typeof GesturesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/composition': {
      id: '/composition'
      path: '/composition'
      fullPath: '/composition'
      preLoaderRoute: typeof CompositionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artists': {
      id: '/artists'
      path: '/artists'
      fullPath: '/artists'
      preLoaderRoute: typeof ArtistsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ArtistsRoute: ArtistsRoute,
  CompositionRoute: CompositionRoute,
  GesturesRoute: GesturesRoute,
  HelpRoute: HelpRoute,
  PosturesRoute: PosturesRoute,
  StylesRoute: StylesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
